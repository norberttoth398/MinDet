from MinDet import nms
import numpy as np
import torch
def test_nms_remove():
        dummy_result = ([np.array([[1.3094001e+03, 1.8255767e+03, 1.3892668e+03, 1.9102334e+03,
          9.9999952e-01],
         [1.7510597e+03, 7.3333154e+00, 1.8567128e+03, 1.5045822e+02,
          9.9999893e-01],
         [1.8062238e+03, 1.7227506e+03, 1.8704705e+03, 1.8684250e+03,
          9.9999893e-01]])], [np.array([np.zeros((10,10)),np.zeros((10,10)),np.zeros((10,10))])])
        dummy_nms_res = [0.95, 0.65, 0.25]
        dtr = (np.array([[[1.8062238e+03, 1.7227506e+03, 1.8704705e+03, 1.8684250e+03,
         9.9999893e-01]]]), np.array([[[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]]]))

        test_res = nms.nms_remove(dummy_result, dummy_nms_res)

        assert test_res[0].shape == dtr[0].shape and test_res[1].shape == dtr[1].shape

def test_mask_nms():
    dummy_result = ([np.array([[1.3094001e+03, 1.8255767e+03, 1.3892668e+03, 1.9102334e+03,
          9.9999952e-01],
         [1.7510597e+03, 7.3333154e+00, 1.8567128e+03, 1.5045822e+02,
          9.9999893e-01],
         [1.8062238e+03, 1.7227506e+03, 1.8704705e+03, 1.8684250e+03,
          9.9999893e-01]])], [np.array([np.zeros((10,10)),np.zeros((10,10)),np.zeros((10,10))])])
    
    res = nms.mask_nms(torch.Tensor(np.asarray(dummy_result[1][0])), torch.ones((len(dummy_result[0][0]))))
    
    assert res[0] == 0 and np.nan_to_num(res[1]) == 0 and  np.nan_to_num(res[2]) == 0
